service.name = hypertrace-trace-enricher
service.admin.port = 8099

main.class = org.hypertrace.traceenricher.trace.enricher.TraceEnricher

flink.job {
  parallelism = 4
  metrics {
    metrics.reporters = "prometheus"
    metrics.reporter.prometheus.class = "org.hypertrace.core.serviceframework.metrics.flink.PrometheusReporter"
  }
}

flink.source {
  type = kafka
  topic = structured-traces-from-raw-spans
  topic = ${?KAFKA_SOURCE_TOPIC}
  schema.registry {
    schema.registry.url = "http://localhost:8081"
    schema.registry.url = ${?SCHEMA_REGISTRY_URL}
    specific.avro.reader = true
  }
  kafka {
    bootstrap.servers = "localhost:9092"
    bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
    group.id = "structured-traces-enrichment-job"
    auto.offset.reset = "latest"
    enable.auto.commit = true
    auto.commit.interval.ms = 5000
  }
}

flink.sink {
  type = kafka
  topic = pre-sessionized-enriched-structured-traces
  topic = ${KAFKA_SINK_TOPIC}
  log.failures.only = true
  schema.registry {
    schema.registry.url = "http://localhost:8081"
    schema.registry.url = ${?SCHEMA_REGISTRY_URL}
  }
  kafka {
    bootstrap.servers = "localhost:9092"
    bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
  }
}

enricher {
  names = ["SpanTypeAttributeEnricher", "ApiStatusEnricher", "EndpointEnricher", "TransactionNameEnricher", "ApiBoundaryTypeAttributeEnricher", "ErrorsAndExceptionsEnricher", "BackendEntityEnricher", "HttpAttributeEnricher", "DefaultServiceEntityEnricher", "UserAgentSpanEnricher"]

  DefaultServiceEntityEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.DefaultServiceEntityEnricher"
    entity.service.config = {
      host = localhost
      host = ${?ENTITY_SERVICE_HOST_CONFIG}
      port = 50061
      port = ${?ENTITY_SERVICE_PORT_CONFIG}
    }
    dependencies = ["ApiBoundaryTypeAttributeEnricher"]
  }

  SpanTypeAttributeEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.SpanTypeAttributeEnricher"
  }

  HttpAttributeEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.HttpAttributeEnricher"
  }

  TransactionNameEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.TransactionNameEnricher"
  }

  ApiBoundaryTypeAttributeEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.ApiBoundaryTypeAttributeEnricher"
    dependencies = ["SpanTypeAttributeEnricher"]
  }

  ErrorsAndExceptionsEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.ErrorsAndExceptionsEnricher"
    dependencies = ["ApiStatusEnricher"]
  }

  BackendEntityEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.BackendEntityEnricher"
    entity.service.config = {
      host = localhost
      host = ${?ENTITY_SERVICE_HOST_CONFIG}
      port = 50061
      port = ${?ENTITY_SERVICE_PORT_CONFIG}
    }
    dependencies = ["DefaultServiceEntityEnricher"]
  }

  ApiStatusEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.ApiStatusEnricher"
    dependencies = ["SpanTypeAttributeEnricher"]
  }

  UserAgentSpanEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.UserAgentSpanEnricher"
  }

  EndpointEnricher {
    class = "org.hypertrace.traceenricher.enrichment.enrichers.endpoint.EndpointEnricher"
    dependencies = ["DefaultServiceEntityEnricher", "ApiBoundaryTypeAttributeEnricher"]
    entity.service.config = {
      host = localhost
      host = ${?ENTITY_SERVICE_HOST_CONFIG}
      port = 50061
      port = ${?ENTITY_SERVICE_PORT_CONFIG}
    }
  }
}

logger {
  names = ["file", "kafka"]
  kafka {
    brokers = "localhost:9092"
    brokers = ${?KAFKA_BOOTSTRAP_SERVERS}
    topic = "job-structured-trace-enrichment-log"
  }
  file {
    dir = "/var/logs/trace-enricher"
  }
}

metrics.reporter {
  prefix = org.hypertrace.traceenricher.StructuredTraceEnrichment
  names = ["prometheus"]
  console.reportInterval = 30
}
